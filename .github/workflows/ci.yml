name: Build And Release Pkgs
on:
  workflow_dispatch:
  push:
    paths:
      - '**'
      - '!docs/**'
      - '!.github/**'
      - '!README.md'
    branches:
      - main
  pull_request: 
    paths:
      - '**'
      - '!docs/**'
      - '!.github/**'
      - '!README.md'
    branches: 
      - main

jobs:
  unit-tests:
    name: unit-test-${{ matrix.module }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        module: [argocdclient, auth, clickhouse, github, kafka, logger, otel, vault, yaml]
    permissions:
      contents: read
      actions: read
      pull-requests: write # needed for coverage comments
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ^1.23.5
      
      - name: Test ${{ matrix.module }} module
        working-directory: ${{ matrix.module }}
        run: |
          go mod download
          go test -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Upload coverage for ${{ matrix.module }}
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ matrix.module }}
          path: ${{ matrix.module }}/coverage.out
  lint:
    name: lint-${{ matrix.module }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        module: [argocdclient, auth, clickhouse, github, kafka, logger, otel, vault, yaml]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ^1.23.5
      - name: Install tools
        run: make install-tools
      - name: Lint ${{ matrix.module }} module
        working-directory: ${{ matrix.module }}
        run: |
          go mod tidy
          golangci-lint run --config ../.github/.golangci.yml --timeout 5m ./...

  # Unified coverage reporting job
  code-coverage:
    name: "Generate coverage report"
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: unit-tests
    continue-on-error: true
    strategy:
      matrix:
        module: [argocdclient, auth, clickhouse, github, kafka, logger, otel, vault, yaml]
    permissions:
      contents: read
      actions: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      # Download coverage artifact for this specific module
      - name: Download coverage for ${{ matrix.module }}
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-${{ matrix.module }}
          path: coverage-${{ matrix.module }}
      
      # Upload module-specific coverage with unique name
      - name: Upload ${{ matrix.module }} coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.module }}-final
          path: coverage-${{ matrix.module }}/coverage.out
      
      # Generate coverage report for this specific module
      - name: Generate ${{ matrix.module }} coverage report
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: coverage-${{ matrix.module }}/coverage.out
          threshold-file: 40
          threshold-package: 40
          threshold-total: 40

  # Check that all unit tests passed
  unit-tests-check:
    name: "Unit tests status check"
    runs-on: ubuntu-latest
    needs: unit-tests
    if: always()
    steps:
      - name: Check unit test results
        run: |
          echo "Unit tests completed"
          # This job will fail if any of the matrix unit test jobs failed
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Some unit tests failed"
            exit 1
          fi
          echo "All unit tests passed"

  # Check that all lint jobs passed  
  lint-check:
    name: "Lint status check"
    runs-on: ubuntu-latest
    needs: lint
    if: always()
    steps:
      - name: Check lint results
        run: |
          echo "Lint jobs completed"
          # This job will fail if any of the matrix lint jobs failed
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Some lint jobs failed"
            exit 1
          fi
          echo "All lint jobs passed"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: 
      - unit-tests-check
      - lint-check
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.ref }}
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: '6.0.x'
    - name: Calculate Version
      id: calculate_version # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v3.1.11
      with:
        useConfigFile: true
        disableCache: true
        configFilePath: .github/Gitversion.yml
    - name: Create Tags
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

        git tag -a argocdclient/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release argocdclient/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a auth/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release auth/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a clickhouse/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release clickhouse/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a github/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release github/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a kafka/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release kafka/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a logger/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release logger/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a otel/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release otel/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a vault/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release vault/v${{ steps.calculate_version.outputs.majorMinorPatch }}"
        git tag -a yaml/v${{ steps.calculate_version.outputs.majorMinorPatch }} -m "Release yaml/v${{ steps.calculate_version.outputs.majorMinorPatch }}"

        git push origin argocdclient/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin auth/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin clickhouse/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin github/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin kafka/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin logger/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin otel/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin vault/v${{ steps.calculate_version.outputs.majorMinorPatch }}
        git push origin yaml/v${{ steps.calculate_version.outputs.majorMinorPatch }}
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.calculate_version.outputs.majorMinorPatch }}
        release_name: Release v${{ steps.calculate_version.outputs.majorMinorPatch }}
        body: |
          # goLibMyCarrier v${{ steps.calculate_version.outputs.majorMinorPatch }}
          
          This release includes updates to all Go packages in the goLibMyCarrier collection.
          
          ## Packages Released
          
          All packages have been tagged with version `v${{ steps.calculate_version.outputs.majorMinorPatch }}`:

          - **argocdclient** - ArgoCD client utilities
          - **auth** - Authentication middleware for Gin framework
          - **clickhouse** - ClickHouse database utilities  
          - **github** - GitHub authentication and interaction utilities
          - **kafka** - Kafka producer and consumer utilities
          - **logger** - Pre-configured Zap logger
          - **otel** - OpenTelemetry integration for distributed tracing
          - **vault** - HashiCorp Vault interaction utilities
          - **yaml** - YAML file read/write utilities
          
          ## Installation
          
          Install any package using:
          ```bash
          go get github.com/MyCarrier-DevOps/goLibMyCarrier/<package>@v${{ steps.calculate_version.outputs.majorMinorPatch }}
          ```
          
          For example:
          ```bash
          go get github.com/MyCarrier-DevOps/goLibMyCarrier/kafka@v${{ steps.calculate_version.outputs.majorMinorPatch }}
          go get github.com/MyCarrier-DevOps/goLibMyCarrier/auth@v${{ steps.calculate_version.outputs.majorMinorPatch }}
          ```
          
          ## Documentation
          
          View package documentation on pkg.go.dev:
          - [argocdclient](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/argocdclient@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [auth](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/auth@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [clickhouse](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/clickhouse@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [github](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/github@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [kafka](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/kafka@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [logger](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/logger@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [otel](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/otel@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [vault](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/vault@v${{ steps.calculate_version.outputs.majorMinorPatch }})
          - [yaml](https://pkg.go.dev/github.com/MyCarrier-DevOps/goLibMyCarrier/yaml@v${{ steps.calculate_version.outputs.majorMinorPatch }})
        draft: false
        prerelease: false